# name: Build and Deploy code

# on:
#   push:
#     branches:
#       - master
#   pull_request:
#     branches:
#       - master

# jobs:
#   testing:
#     environment:
#       name: testing
#     env:
#       DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
#       DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
#       SECRET_KEY: ${{ secrets.SECRET_KEY }}
#       ALGORITHM: ${{ secrets.ALGORITHM }}
#       ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
#       SMTPEMAIL: ${{ secrets.SMTPEMAIL }}
#       SMTPPASSWORD: ${{ secrets.SMTPPASSWORD }}
#       HOSTNAME: ${{ secrets.HOSTNAME }}
#       PORT: ${{ secrets.PORT }}
#       DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
#       TESTING_DB_NAME: ${{ secrets.TESTING_DB_NAME }}
#       TESTING_DB_HOST: ${{ secrets.TESTING_DB_HOST }}
#       TESTING_DB_PORT: ${{ secrets.TESTING_DB_PORT }}
#       POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
#       POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
#       POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

#     runs-on: ubuntu-latest

#     steps:
#       - name: pulling repo
#         uses: actions/checkout@v2

#       - name: installing python version 3.10.6
#         uses: actions/setup-python@v2
#         with:
#           python-version: 3.10.6

#       - name: update pip
#         run: python -m pip install --upgrade pip

#       - name: installing dependencies
#         run: pip install -r requirements.txt

#       - name: testing
#         run: |
#           docker-compose up -d
#           docker ps
#           pytest -v -s

#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Login to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Build and push
#         uses: docker/build-push-action@v4
#         with:
#           context: .
#           file: ./Dockerfile
#           push: true
#           tags: ${{ secrets.DOCKERHUB_USERNAME }}/book_rental
      

#   deployment:
#     environment:
#       name: deployment

#     runs-on: ubuntu-latest

#     needs: testing
    
#     steps:
#       - name: Set up AWS CLI
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ap-south-1 

#       - name: Get EC2 instance IP
#         id: get_ip
#         run: |
#           instance_id="i-039cead54d6c6bddf"
#           ip_address=$(aws ec2 describe-instances --instance-id "$instance_id" --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
#           echo "::set-output name=ip_address::$ip_address"

#       - name: SSH into EC2 instance and deploy
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ steps.get_ip.outputs.ip_address }}
#           username: ubuntu
#           key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
#           port: 22
#           script: |
#             sudo rm -rf book-rental-fastapi/
#             git clone git@github.com:abhishek-goswamii/book-rental-fastapi.git
#             cd /home/ubuntu/book-rental-fastapi
#             sudo docker-compose down
#             sudo docker-compose pull
#             sudo docker-compose up -d
            
